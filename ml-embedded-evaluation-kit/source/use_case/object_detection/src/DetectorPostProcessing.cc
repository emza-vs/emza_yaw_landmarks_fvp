/*
 * Copyright (c) 2022 Arm Limited. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "DetectorPostProcessing.hpp"
#include "PlatformMath.hpp"

#include <algorithm>
#include <cmath>

namespace arm {
namespace app {


namespace ssd {

// 17888 bytes
static float priors_arr[SSD_NUM_PRIORS][SSD_NUM_FEATURE_MAPS] = {
0.025, 0.0333333, 0.0625, 0.0833333,
0.025, 0.0333333, 0.1, 0.133333,
0.025, 0.0333333, 0.15, 0.2,
0.075, 0.0333333, 0.0625, 0.0833333,
0.075, 0.0333333, 0.1, 0.133333,
0.075, 0.0333333, 0.15, 0.2,
0.125, 0.0333333, 0.0625, 0.0833333,
0.125, 0.0333333, 0.1, 0.133333,
0.125, 0.0333333, 0.15, 0.2,
0.175, 0.0333333, 0.0625, 0.0833333,
0.175, 0.0333333, 0.1, 0.133333,
0.175, 0.0333333, 0.15, 0.2,
0.225, 0.0333333, 0.0625, 0.0833333,
0.225, 0.0333333, 0.1, 0.133333,
0.225, 0.0333333, 0.15, 0.2,
0.275, 0.0333333, 0.0625, 0.0833333,
0.275, 0.0333333, 0.1, 0.133333,
0.275, 0.0333333, 0.15, 0.2,
0.325, 0.0333333, 0.0625, 0.0833333,
0.325, 0.0333333, 0.1, 0.133333,
0.325, 0.0333333, 0.15, 0.2,
0.375, 0.0333333, 0.0625, 0.0833333,
0.375, 0.0333333, 0.1, 0.133333,
0.375, 0.0333333, 0.15, 0.2,
0.425, 0.0333333, 0.0625, 0.0833333,
0.425, 0.0333333, 0.1, 0.133333,
0.425, 0.0333333, 0.15, 0.2,
0.475, 0.0333333, 0.0625, 0.0833333,
0.475, 0.0333333, 0.1, 0.133333,
0.475, 0.0333333, 0.15, 0.2,
0.525, 0.0333333, 0.0625, 0.0833333,
0.525, 0.0333333, 0.1, 0.133333,
0.525, 0.0333333, 0.15, 0.2,
0.575, 0.0333333, 0.0625, 0.0833333,
0.575, 0.0333333, 0.1, 0.133333,
0.575, 0.0333333, 0.15, 0.2,
0.625, 0.0333333, 0.0625, 0.0833333,
0.625, 0.0333333, 0.1, 0.133333,
0.625, 0.0333333, 0.15, 0.2,
0.675, 0.0333333, 0.0625, 0.0833333,
0.675, 0.0333333, 0.1, 0.133333,
0.675, 0.0333333, 0.15, 0.2,
0.725, 0.0333333, 0.0625, 0.0833333,
0.725, 0.0333333, 0.1, 0.133333,
0.725, 0.0333333, 0.15, 0.2,
0.775, 0.0333333, 0.0625, 0.0833333,
0.775, 0.0333333, 0.1, 0.133333,
0.775, 0.0333333, 0.15, 0.2,
0.825, 0.0333333, 0.0625, 0.0833333,
0.825, 0.0333333, 0.1, 0.133333,
0.825, 0.0333333, 0.15, 0.2,
0.875, 0.0333333, 0.0625, 0.0833333,
0.875, 0.0333333, 0.1, 0.133333,
0.875, 0.0333333, 0.15, 0.2,
0.925, 0.0333333, 0.0625, 0.0833333,
0.925, 0.0333333, 0.1, 0.133333,
0.925, 0.0333333, 0.15, 0.2,
0.975, 0.0333333, 0.0625, 0.0833333,
0.975, 0.0333333, 0.1, 0.133333,
0.975, 0.0333333, 0.15, 0.2,
0.025, 0.1, 0.0625, 0.0833333,
0.025, 0.1, 0.1, 0.133333,
0.025, 0.1, 0.15, 0.2,
0.075, 0.1, 0.0625, 0.0833333,
0.075, 0.1, 0.1, 0.133333,
0.075, 0.1, 0.15, 0.2,
0.125, 0.1, 0.0625, 0.0833333,
0.125, 0.1, 0.1, 0.133333,
0.125, 0.1, 0.15, 0.2,
0.175, 0.1, 0.0625, 0.0833333,
0.175, 0.1, 0.1, 0.133333,
0.175, 0.1, 0.15, 0.2,
0.225, 0.1, 0.0625, 0.0833333,
0.225, 0.1, 0.1, 0.133333,
0.225, 0.1, 0.15, 0.2,
0.275, 0.1, 0.0625, 0.0833333,
0.275, 0.1, 0.1, 0.133333,
0.275, 0.1, 0.15, 0.2,
0.325, 0.1, 0.0625, 0.0833333,
0.325, 0.1, 0.1, 0.133333,
0.325, 0.1, 0.15, 0.2,
0.375, 0.1, 0.0625, 0.0833333,
0.375, 0.1, 0.1, 0.133333,
0.375, 0.1, 0.15, 0.2,
0.425, 0.1, 0.0625, 0.0833333,
0.425, 0.1, 0.1, 0.133333,
0.425, 0.1, 0.15, 0.2,
0.475, 0.1, 0.0625, 0.0833333,
0.475, 0.1, 0.1, 0.133333,
0.475, 0.1, 0.15, 0.2,
0.525, 0.1, 0.0625, 0.0833333,
0.525, 0.1, 0.1, 0.133333,
0.525, 0.1, 0.15, 0.2,
0.575, 0.1, 0.0625, 0.0833333,
0.575, 0.1, 0.1, 0.133333,
0.575, 0.1, 0.15, 0.2,
0.625, 0.1, 0.0625, 0.0833333,
0.625, 0.1, 0.1, 0.133333,
0.625, 0.1, 0.15, 0.2,
0.675, 0.1, 0.0625, 0.0833333,
0.675, 0.1, 0.1, 0.133333,
0.675, 0.1, 0.15, 0.2,
0.725, 0.1, 0.0625, 0.0833333,
0.725, 0.1, 0.1, 0.133333,
0.725, 0.1, 0.15, 0.2,
0.775, 0.1, 0.0625, 0.0833333,
0.775, 0.1, 0.1, 0.133333,
0.775, 0.1, 0.15, 0.2,
0.825, 0.1, 0.0625, 0.0833333,
0.825, 0.1, 0.1, 0.133333,
0.825, 0.1, 0.15, 0.2,
0.875, 0.1, 0.0625, 0.0833333,
0.875, 0.1, 0.1, 0.133333,
0.875, 0.1, 0.15, 0.2,
0.925, 0.1, 0.0625, 0.0833333,
0.925, 0.1, 0.1, 0.133333,
0.925, 0.1, 0.15, 0.2,
0.975, 0.1, 0.0625, 0.0833333,
0.975, 0.1, 0.1, 0.133333,
0.975, 0.1, 0.15, 0.2,
0.025, 0.166667, 0.0625, 0.0833333,
0.025, 0.166667, 0.1, 0.133333,
0.025, 0.166667, 0.15, 0.2,
0.075, 0.166667, 0.0625, 0.0833333,
0.075, 0.166667, 0.1, 0.133333,
0.075, 0.166667, 0.15, 0.2,
0.125, 0.166667, 0.0625, 0.0833333,
0.125, 0.166667, 0.1, 0.133333,
0.125, 0.166667, 0.15, 0.2,
0.175, 0.166667, 0.0625, 0.0833333,
0.175, 0.166667, 0.1, 0.133333,
0.175, 0.166667, 0.15, 0.2,
0.225, 0.166667, 0.0625, 0.0833333,
0.225, 0.166667, 0.1, 0.133333,
0.225, 0.166667, 0.15, 0.2,
0.275, 0.166667, 0.0625, 0.0833333,
0.275, 0.166667, 0.1, 0.133333,
0.275, 0.166667, 0.15, 0.2,
0.325, 0.166667, 0.0625, 0.0833333,
0.325, 0.166667, 0.1, 0.133333,
0.325, 0.166667, 0.15, 0.2,
0.375, 0.166667, 0.0625, 0.0833333,
0.375, 0.166667, 0.1, 0.133333,
0.375, 0.166667, 0.15, 0.2,
0.425, 0.166667, 0.0625, 0.0833333,
0.425, 0.166667, 0.1, 0.133333,
0.425, 0.166667, 0.15, 0.2,
0.475, 0.166667, 0.0625, 0.0833333,
0.475, 0.166667, 0.1, 0.133333,
0.475, 0.166667, 0.15, 0.2,
0.525, 0.166667, 0.0625, 0.0833333,
0.525, 0.166667, 0.1, 0.133333,
0.525, 0.166667, 0.15, 0.2,
0.575, 0.166667, 0.0625, 0.0833333,
0.575, 0.166667, 0.1, 0.133333,
0.575, 0.166667, 0.15, 0.2,
0.625, 0.166667, 0.0625, 0.0833333,
0.625, 0.166667, 0.1, 0.133333,
0.625, 0.166667, 0.15, 0.2,
0.675, 0.166667, 0.0625, 0.0833333,
0.675, 0.166667, 0.1, 0.133333,
0.675, 0.166667, 0.15, 0.2,
0.725, 0.166667, 0.0625, 0.0833333,
0.725, 0.166667, 0.1, 0.133333,
0.725, 0.166667, 0.15, 0.2,
0.775, 0.166667, 0.0625, 0.0833333,
0.775, 0.166667, 0.1, 0.133333,
0.775, 0.166667, 0.15, 0.2,
0.825, 0.166667, 0.0625, 0.0833333,
0.825, 0.166667, 0.1, 0.133333,
0.825, 0.166667, 0.15, 0.2,
0.875, 0.166667, 0.0625, 0.0833333,
0.875, 0.166667, 0.1, 0.133333,
0.875, 0.166667, 0.15, 0.2,
0.925, 0.166667, 0.0625, 0.0833333,
0.925, 0.166667, 0.1, 0.133333,
0.925, 0.166667, 0.15, 0.2,
0.975, 0.166667, 0.0625, 0.0833333,
0.975, 0.166667, 0.1, 0.133333,
0.975, 0.166667, 0.15, 0.2,
0.025, 0.233333, 0.0625, 0.0833333,
0.025, 0.233333, 0.1, 0.133333,
0.025, 0.233333, 0.15, 0.2,
0.075, 0.233333, 0.0625, 0.0833333,
0.075, 0.233333, 0.1, 0.133333,
0.075, 0.233333, 0.15, 0.2,
0.125, 0.233333, 0.0625, 0.0833333,
0.125, 0.233333, 0.1, 0.133333,
0.125, 0.233333, 0.15, 0.2,
0.175, 0.233333, 0.0625, 0.0833333,
0.175, 0.233333, 0.1, 0.133333,
0.175, 0.233333, 0.15, 0.2,
0.225, 0.233333, 0.0625, 0.0833333,
0.225, 0.233333, 0.1, 0.133333,
0.225, 0.233333, 0.15, 0.2,
0.275, 0.233333, 0.0625, 0.0833333,
0.275, 0.233333, 0.1, 0.133333,
0.275, 0.233333, 0.15, 0.2,
0.325, 0.233333, 0.0625, 0.0833333,
0.325, 0.233333, 0.1, 0.133333,
0.325, 0.233333, 0.15, 0.2,
0.375, 0.233333, 0.0625, 0.0833333,
0.375, 0.233333, 0.1, 0.133333,
0.375, 0.233333, 0.15, 0.2,
0.425, 0.233333, 0.0625, 0.0833333,
0.425, 0.233333, 0.1, 0.133333,
0.425, 0.233333, 0.15, 0.2,
0.475, 0.233333, 0.0625, 0.0833333,
0.475, 0.233333, 0.1, 0.133333,
0.475, 0.233333, 0.15, 0.2,
0.525, 0.233333, 0.0625, 0.0833333,
0.525, 0.233333, 0.1, 0.133333,
0.525, 0.233333, 0.15, 0.2,
0.575, 0.233333, 0.0625, 0.0833333,
0.575, 0.233333, 0.1, 0.133333,
0.575, 0.233333, 0.15, 0.2,
0.625, 0.233333, 0.0625, 0.0833333,
0.625, 0.233333, 0.1, 0.133333,
0.625, 0.233333, 0.15, 0.2,
0.675, 0.233333, 0.0625, 0.0833333,
0.675, 0.233333, 0.1, 0.133333,
0.675, 0.233333, 0.15, 0.2,
0.725, 0.233333, 0.0625, 0.0833333,
0.725, 0.233333, 0.1, 0.133333,
0.725, 0.233333, 0.15, 0.2,
0.775, 0.233333, 0.0625, 0.0833333,
0.775, 0.233333, 0.1, 0.133333,
0.775, 0.233333, 0.15, 0.2,
0.825, 0.233333, 0.0625, 0.0833333,
0.825, 0.233333, 0.1, 0.133333,
0.825, 0.233333, 0.15, 0.2,
0.875, 0.233333, 0.0625, 0.0833333,
0.875, 0.233333, 0.1, 0.133333,
0.875, 0.233333, 0.15, 0.2,
0.925, 0.233333, 0.0625, 0.0833333,
0.925, 0.233333, 0.1, 0.133333,
0.925, 0.233333, 0.15, 0.2,
0.975, 0.233333, 0.0625, 0.0833333,
0.975, 0.233333, 0.1, 0.133333,
0.975, 0.233333, 0.15, 0.2,
0.025, 0.3, 0.0625, 0.0833333,
0.025, 0.3, 0.1, 0.133333,
0.025, 0.3, 0.15, 0.2,
0.075, 0.3, 0.0625, 0.0833333,
0.075, 0.3, 0.1, 0.133333,
0.075, 0.3, 0.15, 0.2,
0.125, 0.3, 0.0625, 0.0833333,
0.125, 0.3, 0.1, 0.133333,
0.125, 0.3, 0.15, 0.2,
0.175, 0.3, 0.0625, 0.0833333,
0.175, 0.3, 0.1, 0.133333,
0.175, 0.3, 0.15, 0.2,
0.225, 0.3, 0.0625, 0.0833333,
0.225, 0.3, 0.1, 0.133333,
0.225, 0.3, 0.15, 0.2,
0.275, 0.3, 0.0625, 0.0833333,
0.275, 0.3, 0.1, 0.133333,
0.275, 0.3, 0.15, 0.2,
0.325, 0.3, 0.0625, 0.0833333,
0.325, 0.3, 0.1, 0.133333,
0.325, 0.3, 0.15, 0.2,
0.375, 0.3, 0.0625, 0.0833333,
0.375, 0.3, 0.1, 0.133333,
0.375, 0.3, 0.15, 0.2,
0.425, 0.3, 0.0625, 0.0833333,
0.425, 0.3, 0.1, 0.133333,
0.425, 0.3, 0.15, 0.2,
0.475, 0.3, 0.0625, 0.0833333,
0.475, 0.3, 0.1, 0.133333,
0.475, 0.3, 0.15, 0.2,
0.525, 0.3, 0.0625, 0.0833333,
0.525, 0.3, 0.1, 0.133333,
0.525, 0.3, 0.15, 0.2,
0.575, 0.3, 0.0625, 0.0833333,
0.575, 0.3, 0.1, 0.133333,
0.575, 0.3, 0.15, 0.2,
0.625, 0.3, 0.0625, 0.0833333,
0.625, 0.3, 0.1, 0.133333,
0.625, 0.3, 0.15, 0.2,
0.675, 0.3, 0.0625, 0.0833333,
0.675, 0.3, 0.1, 0.133333,
0.675, 0.3, 0.15, 0.2,
0.725, 0.3, 0.0625, 0.0833333,
0.725, 0.3, 0.1, 0.133333,
0.725, 0.3, 0.15, 0.2,
0.775, 0.3, 0.0625, 0.0833333,
0.775, 0.3, 0.1, 0.133333,
0.775, 0.3, 0.15, 0.2,
0.825, 0.3, 0.0625, 0.0833333,
0.825, 0.3, 0.1, 0.133333,
0.825, 0.3, 0.15, 0.2,
0.875, 0.3, 0.0625, 0.0833333,
0.875, 0.3, 0.1, 0.133333,
0.875, 0.3, 0.15, 0.2,
0.925, 0.3, 0.0625, 0.0833333,
0.925, 0.3, 0.1, 0.133333,
0.925, 0.3, 0.15, 0.2,
0.975, 0.3, 0.0625, 0.0833333,
0.975, 0.3, 0.1, 0.133333,
0.975, 0.3, 0.15, 0.2,
0.025, 0.366667, 0.0625, 0.0833333,
0.025, 0.366667, 0.1, 0.133333,
0.025, 0.366667, 0.15, 0.2,
0.075, 0.366667, 0.0625, 0.0833333,
0.075, 0.366667, 0.1, 0.133333,
0.075, 0.366667, 0.15, 0.2,
0.125, 0.366667, 0.0625, 0.0833333,
0.125, 0.366667, 0.1, 0.133333,
0.125, 0.366667, 0.15, 0.2,
0.175, 0.366667, 0.0625, 0.0833333,
0.175, 0.366667, 0.1, 0.133333,
0.175, 0.366667, 0.15, 0.2,
0.225, 0.366667, 0.0625, 0.0833333,
0.225, 0.366667, 0.1, 0.133333,
0.225, 0.366667, 0.15, 0.2,
0.275, 0.366667, 0.0625, 0.0833333,
0.275, 0.366667, 0.1, 0.133333,
0.275, 0.366667, 0.15, 0.2,
0.325, 0.366667, 0.0625, 0.0833333,
0.325, 0.366667, 0.1, 0.133333,
0.325, 0.366667, 0.15, 0.2,
0.375, 0.366667, 0.0625, 0.0833333,
0.375, 0.366667, 0.1, 0.133333,
0.375, 0.366667, 0.15, 0.2,
0.425, 0.366667, 0.0625, 0.0833333,
0.425, 0.366667, 0.1, 0.133333,
0.425, 0.366667, 0.15, 0.2,
0.475, 0.366667, 0.0625, 0.0833333,
0.475, 0.366667, 0.1, 0.133333,
0.475, 0.366667, 0.15, 0.2,
0.525, 0.366667, 0.0625, 0.0833333,
0.525, 0.366667, 0.1, 0.133333,
0.525, 0.366667, 0.15, 0.2,
0.575, 0.366667, 0.0625, 0.0833333,
0.575, 0.366667, 0.1, 0.133333,
0.575, 0.366667, 0.15, 0.2,
0.625, 0.366667, 0.0625, 0.0833333,
0.625, 0.366667, 0.1, 0.133333,
0.625, 0.366667, 0.15, 0.2,
0.675, 0.366667, 0.0625, 0.0833333,
0.675, 0.366667, 0.1, 0.133333,
0.675, 0.366667, 0.15, 0.2,
0.725, 0.366667, 0.0625, 0.0833333,
0.725, 0.366667, 0.1, 0.133333,
0.725, 0.366667, 0.15, 0.2,
0.775, 0.366667, 0.0625, 0.0833333,
0.775, 0.366667, 0.1, 0.133333,
0.775, 0.366667, 0.15, 0.2,
0.825, 0.366667, 0.0625, 0.0833333,
0.825, 0.366667, 0.1, 0.133333,
0.825, 0.366667, 0.15, 0.2,
0.875, 0.366667, 0.0625, 0.0833333,
0.875, 0.366667, 0.1, 0.133333,
0.875, 0.366667, 0.15, 0.2,
0.925, 0.366667, 0.0625, 0.0833333,
0.925, 0.366667, 0.1, 0.133333,
0.925, 0.366667, 0.15, 0.2,
0.975, 0.366667, 0.0625, 0.0833333,
0.975, 0.366667, 0.1, 0.133333,
0.975, 0.366667, 0.15, 0.2,
0.025, 0.433333, 0.0625, 0.0833333,
0.025, 0.433333, 0.1, 0.133333,
0.025, 0.433333, 0.15, 0.2,
0.075, 0.433333, 0.0625, 0.0833333,
0.075, 0.433333, 0.1, 0.133333,
0.075, 0.433333, 0.15, 0.2,
0.125, 0.433333, 0.0625, 0.0833333,
0.125, 0.433333, 0.1, 0.133333,
0.125, 0.433333, 0.15, 0.2,
0.175, 0.433333, 0.0625, 0.0833333,
0.175, 0.433333, 0.1, 0.133333,
0.175, 0.433333, 0.15, 0.2,
0.225, 0.433333, 0.0625, 0.0833333,
0.225, 0.433333, 0.1, 0.133333,
0.225, 0.433333, 0.15, 0.2,
0.275, 0.433333, 0.0625, 0.0833333,
0.275, 0.433333, 0.1, 0.133333,
0.275, 0.433333, 0.15, 0.2,
0.325, 0.433333, 0.0625, 0.0833333,
0.325, 0.433333, 0.1, 0.133333,
0.325, 0.433333, 0.15, 0.2,
0.375, 0.433333, 0.0625, 0.0833333,
0.375, 0.433333, 0.1, 0.133333,
0.375, 0.433333, 0.15, 0.2,
0.425, 0.433333, 0.0625, 0.0833333,
0.425, 0.433333, 0.1, 0.133333,
0.425, 0.433333, 0.15, 0.2,
0.475, 0.433333, 0.0625, 0.0833333,
0.475, 0.433333, 0.1, 0.133333,
0.475, 0.433333, 0.15, 0.2,
0.525, 0.433333, 0.0625, 0.0833333,
0.525, 0.433333, 0.1, 0.133333,
0.525, 0.433333, 0.15, 0.2,
0.575, 0.433333, 0.0625, 0.0833333,
0.575, 0.433333, 0.1, 0.133333,
0.575, 0.433333, 0.15, 0.2,
0.625, 0.433333, 0.0625, 0.0833333,
0.625, 0.433333, 0.1, 0.133333,
0.625, 0.433333, 0.15, 0.2,
0.675, 0.433333, 0.0625, 0.0833333,
0.675, 0.433333, 0.1, 0.133333,
0.675, 0.433333, 0.15, 0.2,
0.725, 0.433333, 0.0625, 0.0833333,
0.725, 0.433333, 0.1, 0.133333,
0.725, 0.433333, 0.15, 0.2,
0.775, 0.433333, 0.0625, 0.0833333,
0.775, 0.433333, 0.1, 0.133333,
0.775, 0.433333, 0.15, 0.2,
0.825, 0.433333, 0.0625, 0.0833333,
0.825, 0.433333, 0.1, 0.133333,
0.825, 0.433333, 0.15, 0.2,
0.875, 0.433333, 0.0625, 0.0833333,
0.875, 0.433333, 0.1, 0.133333,
0.875, 0.433333, 0.15, 0.2,
0.925, 0.433333, 0.0625, 0.0833333,
0.925, 0.433333, 0.1, 0.133333,
0.925, 0.433333, 0.15, 0.2,
0.975, 0.433333, 0.0625, 0.0833333,
0.975, 0.433333, 0.1, 0.133333,
0.975, 0.433333, 0.15, 0.2,
0.025, 0.5, 0.0625, 0.0833333,
0.025, 0.5, 0.1, 0.133333,
0.025, 0.5, 0.15, 0.2,
0.075, 0.5, 0.0625, 0.0833333,
0.075, 0.5, 0.1, 0.133333,
0.075, 0.5, 0.15, 0.2,
0.125, 0.5, 0.0625, 0.0833333,
0.125, 0.5, 0.1, 0.133333,
0.125, 0.5, 0.15, 0.2,
0.175, 0.5, 0.0625, 0.0833333,
0.175, 0.5, 0.1, 0.133333,
0.175, 0.5, 0.15, 0.2,
0.225, 0.5, 0.0625, 0.0833333,
0.225, 0.5, 0.1, 0.133333,
0.225, 0.5, 0.15, 0.2,
0.275, 0.5, 0.0625, 0.0833333,
0.275, 0.5, 0.1, 0.133333,
0.275, 0.5, 0.15, 0.2,
0.325, 0.5, 0.0625, 0.0833333,
0.325, 0.5, 0.1, 0.133333,
0.325, 0.5, 0.15, 0.2,
0.375, 0.5, 0.0625, 0.0833333,
0.375, 0.5, 0.1, 0.133333,
0.375, 0.5, 0.15, 0.2,
0.425, 0.5, 0.0625, 0.0833333,
0.425, 0.5, 0.1, 0.133333,
0.425, 0.5, 0.15, 0.2,
0.475, 0.5, 0.0625, 0.0833333,
0.475, 0.5, 0.1, 0.133333,
0.475, 0.5, 0.15, 0.2,
0.525, 0.5, 0.0625, 0.0833333,
0.525, 0.5, 0.1, 0.133333,
0.525, 0.5, 0.15, 0.2,
0.575, 0.5, 0.0625, 0.0833333,
0.575, 0.5, 0.1, 0.133333,
0.575, 0.5, 0.15, 0.2,
0.625, 0.5, 0.0625, 0.0833333,
0.625, 0.5, 0.1, 0.133333,
0.625, 0.5, 0.15, 0.2,
0.675, 0.5, 0.0625, 0.0833333,
0.675, 0.5, 0.1, 0.133333,
0.675, 0.5, 0.15, 0.2,
0.725, 0.5, 0.0625, 0.0833333,
0.725, 0.5, 0.1, 0.133333,
0.725, 0.5, 0.15, 0.2,
0.775, 0.5, 0.0625, 0.0833333,
0.775, 0.5, 0.1, 0.133333,
0.775, 0.5, 0.15, 0.2,
0.825, 0.5, 0.0625, 0.0833333,
0.825, 0.5, 0.1, 0.133333,
0.825, 0.5, 0.15, 0.2,
0.875, 0.5, 0.0625, 0.0833333,
0.875, 0.5, 0.1, 0.133333,
0.875, 0.5, 0.15, 0.2,
0.925, 0.5, 0.0625, 0.0833333,
0.925, 0.5, 0.1, 0.133333,
0.925, 0.5, 0.15, 0.2,
0.975, 0.5, 0.0625, 0.0833333,
0.975, 0.5, 0.1, 0.133333,
0.975, 0.5, 0.15, 0.2,
0.025, 0.566667, 0.0625, 0.0833333,
0.025, 0.566667, 0.1, 0.133333,
0.025, 0.566667, 0.15, 0.2,
0.075, 0.566667, 0.0625, 0.0833333,
0.075, 0.566667, 0.1, 0.133333,
0.075, 0.566667, 0.15, 0.2,
0.125, 0.566667, 0.0625, 0.0833333,
0.125, 0.566667, 0.1, 0.133333,
0.125, 0.566667, 0.15, 0.2,
0.175, 0.566667, 0.0625, 0.0833333,
0.175, 0.566667, 0.1, 0.133333,
0.175, 0.566667, 0.15, 0.2,
0.225, 0.566667, 0.0625, 0.0833333,
0.225, 0.566667, 0.1, 0.133333,
0.225, 0.566667, 0.15, 0.2,
0.275, 0.566667, 0.0625, 0.0833333,
0.275, 0.566667, 0.1, 0.133333,
0.275, 0.566667, 0.15, 0.2,
0.325, 0.566667, 0.0625, 0.0833333,
0.325, 0.566667, 0.1, 0.133333,
0.325, 0.566667, 0.15, 0.2,
0.375, 0.566667, 0.0625, 0.0833333,
0.375, 0.566667, 0.1, 0.133333,
0.375, 0.566667, 0.15, 0.2,
0.425, 0.566667, 0.0625, 0.0833333,
0.425, 0.566667, 0.1, 0.133333,
0.425, 0.566667, 0.15, 0.2,
0.475, 0.566667, 0.0625, 0.0833333,
0.475, 0.566667, 0.1, 0.133333,
0.475, 0.566667, 0.15, 0.2,
0.525, 0.566667, 0.0625, 0.0833333,
0.525, 0.566667, 0.1, 0.133333,
0.525, 0.566667, 0.15, 0.2,
0.575, 0.566667, 0.0625, 0.0833333,
0.575, 0.566667, 0.1, 0.133333,
0.575, 0.566667, 0.15, 0.2,
0.625, 0.566667, 0.0625, 0.0833333,
0.625, 0.566667, 0.1, 0.133333,
0.625, 0.566667, 0.15, 0.2,
0.675, 0.566667, 0.0625, 0.0833333,
0.675, 0.566667, 0.1, 0.133333,
0.675, 0.566667, 0.15, 0.2,
0.725, 0.566667, 0.0625, 0.0833333,
0.725, 0.566667, 0.1, 0.133333,
0.725, 0.566667, 0.15, 0.2,
0.775, 0.566667, 0.0625, 0.0833333,
0.775, 0.566667, 0.1, 0.133333,
0.775, 0.566667, 0.15, 0.2,
0.825, 0.566667, 0.0625, 0.0833333,
0.825, 0.566667, 0.1, 0.133333,
0.825, 0.566667, 0.15, 0.2,
0.875, 0.566667, 0.0625, 0.0833333,
0.875, 0.566667, 0.1, 0.133333,
0.875, 0.566667, 0.15, 0.2,
0.925, 0.566667, 0.0625, 0.0833333,
0.925, 0.566667, 0.1, 0.133333,
0.925, 0.566667, 0.15, 0.2,
0.975, 0.566667, 0.0625, 0.0833333,
0.975, 0.566667, 0.1, 0.133333,
0.975, 0.566667, 0.15, 0.2,
0.025, 0.633333, 0.0625, 0.0833333,
0.025, 0.633333, 0.1, 0.133333,
0.025, 0.633333, 0.15, 0.2,
0.075, 0.633333, 0.0625, 0.0833333,
0.075, 0.633333, 0.1, 0.133333,
0.075, 0.633333, 0.15, 0.2,
0.125, 0.633333, 0.0625, 0.0833333,
0.125, 0.633333, 0.1, 0.133333,
0.125, 0.633333, 0.15, 0.2,
0.175, 0.633333, 0.0625, 0.0833333,
0.175, 0.633333, 0.1, 0.133333,
0.175, 0.633333, 0.15, 0.2,
0.225, 0.633333, 0.0625, 0.0833333,
0.225, 0.633333, 0.1, 0.133333,
0.225, 0.633333, 0.15, 0.2,
0.275, 0.633333, 0.0625, 0.0833333,
0.275, 0.633333, 0.1, 0.133333,
0.275, 0.633333, 0.15, 0.2,
0.325, 0.633333, 0.0625, 0.0833333,
0.325, 0.633333, 0.1, 0.133333,
0.325, 0.633333, 0.15, 0.2,
0.375, 0.633333, 0.0625, 0.0833333,
0.375, 0.633333, 0.1, 0.133333,
0.375, 0.633333, 0.15, 0.2,
0.425, 0.633333, 0.0625, 0.0833333,
0.425, 0.633333, 0.1, 0.133333,
0.425, 0.633333, 0.15, 0.2,
0.475, 0.633333, 0.0625, 0.0833333,
0.475, 0.633333, 0.1, 0.133333,
0.475, 0.633333, 0.15, 0.2,
0.525, 0.633333, 0.0625, 0.0833333,
0.525, 0.633333, 0.1, 0.133333,
0.525, 0.633333, 0.15, 0.2,
0.575, 0.633333, 0.0625, 0.0833333,
0.575, 0.633333, 0.1, 0.133333,
0.575, 0.633333, 0.15, 0.2,
0.625, 0.633333, 0.0625, 0.0833333,
0.625, 0.633333, 0.1, 0.133333,
0.625, 0.633333, 0.15, 0.2,
0.675, 0.633333, 0.0625, 0.0833333,
0.675, 0.633333, 0.1, 0.133333,
0.675, 0.633333, 0.15, 0.2,
0.725, 0.633333, 0.0625, 0.0833333,
0.725, 0.633333, 0.1, 0.133333,
0.725, 0.633333, 0.15, 0.2,
0.775, 0.633333, 0.0625, 0.0833333,
0.775, 0.633333, 0.1, 0.133333,
0.775, 0.633333, 0.15, 0.2,
0.825, 0.633333, 0.0625, 0.0833333,
0.825, 0.633333, 0.1, 0.133333,
0.825, 0.633333, 0.15, 0.2,
0.875, 0.633333, 0.0625, 0.0833333,
0.875, 0.633333, 0.1, 0.133333,
0.875, 0.633333, 0.15, 0.2,
0.925, 0.633333, 0.0625, 0.0833333,
0.925, 0.633333, 0.1, 0.133333,
0.925, 0.633333, 0.15, 0.2,
0.975, 0.633333, 0.0625, 0.0833333,
0.975, 0.633333, 0.1, 0.133333,
0.975, 0.633333, 0.15, 0.2,
0.025, 0.7, 0.0625, 0.0833333,
0.025, 0.7, 0.1, 0.133333,
0.025, 0.7, 0.15, 0.2,
0.075, 0.7, 0.0625, 0.0833333,
0.075, 0.7, 0.1, 0.133333,
0.075, 0.7, 0.15, 0.2,
0.125, 0.7, 0.0625, 0.0833333,
0.125, 0.7, 0.1, 0.133333,
0.125, 0.7, 0.15, 0.2,
0.175, 0.7, 0.0625, 0.0833333,
0.175, 0.7, 0.1, 0.133333,
0.175, 0.7, 0.15, 0.2,
0.225, 0.7, 0.0625, 0.0833333,
0.225, 0.7, 0.1, 0.133333,
0.225, 0.7, 0.15, 0.2,
0.275, 0.7, 0.0625, 0.0833333,
0.275, 0.7, 0.1, 0.133333,
0.275, 0.7, 0.15, 0.2,
0.325, 0.7, 0.0625, 0.0833333,
0.325, 0.7, 0.1, 0.133333,
0.325, 0.7, 0.15, 0.2,
0.375, 0.7, 0.0625, 0.0833333,
0.375, 0.7, 0.1, 0.133333,
0.375, 0.7, 0.15, 0.2,
0.425, 0.7, 0.0625, 0.0833333,
0.425, 0.7, 0.1, 0.133333,
0.425, 0.7, 0.15, 0.2,
0.475, 0.7, 0.0625, 0.0833333,
0.475, 0.7, 0.1, 0.133333,
0.475, 0.7, 0.15, 0.2,
0.525, 0.7, 0.0625, 0.0833333,
0.525, 0.7, 0.1, 0.133333,
0.525, 0.7, 0.15, 0.2,
0.575, 0.7, 0.0625, 0.0833333,
0.575, 0.7, 0.1, 0.133333,
0.575, 0.7, 0.15, 0.2,
0.625, 0.7, 0.0625, 0.0833333,
0.625, 0.7, 0.1, 0.133333,
0.625, 0.7, 0.15, 0.2,
0.675, 0.7, 0.0625, 0.0833333,
0.675, 0.7, 0.1, 0.133333,
0.675, 0.7, 0.15, 0.2,
0.725, 0.7, 0.0625, 0.0833333,
0.725, 0.7, 0.1, 0.133333,
0.725, 0.7, 0.15, 0.2,
0.775, 0.7, 0.0625, 0.0833333,
0.775, 0.7, 0.1, 0.133333,
0.775, 0.7, 0.15, 0.2,
0.825, 0.7, 0.0625, 0.0833333,
0.825, 0.7, 0.1, 0.133333,
0.825, 0.7, 0.15, 0.2,
0.875, 0.7, 0.0625, 0.0833333,
0.875, 0.7, 0.1, 0.133333,
0.875, 0.7, 0.15, 0.2,
0.925, 0.7, 0.0625, 0.0833333,
0.925, 0.7, 0.1, 0.133333,
0.925, 0.7, 0.15, 0.2,
0.975, 0.7, 0.0625, 0.0833333,
0.975, 0.7, 0.1, 0.133333,
0.975, 0.7, 0.15, 0.2,
0.025, 0.766667, 0.0625, 0.0833333,
0.025, 0.766667, 0.1, 0.133333,
0.025, 0.766667, 0.15, 0.2,
0.075, 0.766667, 0.0625, 0.0833333,
0.075, 0.766667, 0.1, 0.133333,
0.075, 0.766667, 0.15, 0.2,
0.125, 0.766667, 0.0625, 0.0833333,
0.125, 0.766667, 0.1, 0.133333,
0.125, 0.766667, 0.15, 0.2,
0.175, 0.766667, 0.0625, 0.0833333,
0.175, 0.766667, 0.1, 0.133333,
0.175, 0.766667, 0.15, 0.2,
0.225, 0.766667, 0.0625, 0.0833333,
0.225, 0.766667, 0.1, 0.133333,
0.225, 0.766667, 0.15, 0.2,
0.275, 0.766667, 0.0625, 0.0833333,
0.275, 0.766667, 0.1, 0.133333,
0.275, 0.766667, 0.15, 0.2,
0.325, 0.766667, 0.0625, 0.0833333,
0.325, 0.766667, 0.1, 0.133333,
0.325, 0.766667, 0.15, 0.2,
0.375, 0.766667, 0.0625, 0.0833333,
0.375, 0.766667, 0.1, 0.133333,
0.375, 0.766667, 0.15, 0.2,
0.425, 0.766667, 0.0625, 0.0833333,
0.425, 0.766667, 0.1, 0.133333,
0.425, 0.766667, 0.15, 0.2,
0.475, 0.766667, 0.0625, 0.0833333,
0.475, 0.766667, 0.1, 0.133333,
0.475, 0.766667, 0.15, 0.2,
0.525, 0.766667, 0.0625, 0.0833333,
0.525, 0.766667, 0.1, 0.133333,
0.525, 0.766667, 0.15, 0.2,
0.575, 0.766667, 0.0625, 0.0833333,
0.575, 0.766667, 0.1, 0.133333,
0.575, 0.766667, 0.15, 0.2,
0.625, 0.766667, 0.0625, 0.0833333,
0.625, 0.766667, 0.1, 0.133333,
0.625, 0.766667, 0.15, 0.2,
0.675, 0.766667, 0.0625, 0.0833333,
0.675, 0.766667, 0.1, 0.133333,
0.675, 0.766667, 0.15, 0.2,
0.725, 0.766667, 0.0625, 0.0833333,
0.725, 0.766667, 0.1, 0.133333,
0.725, 0.766667, 0.15, 0.2,
0.775, 0.766667, 0.0625, 0.0833333,
0.775, 0.766667, 0.1, 0.133333,
0.775, 0.766667, 0.15, 0.2,
0.825, 0.766667, 0.0625, 0.0833333,
0.825, 0.766667, 0.1, 0.133333,
0.825, 0.766667, 0.15, 0.2,
0.875, 0.766667, 0.0625, 0.0833333,
0.875, 0.766667, 0.1, 0.133333,
0.875, 0.766667, 0.15, 0.2,
0.925, 0.766667, 0.0625, 0.0833333,
0.925, 0.766667, 0.1, 0.133333,
0.925, 0.766667, 0.15, 0.2,
0.975, 0.766667, 0.0625, 0.0833333,
0.975, 0.766667, 0.1, 0.133333,
0.975, 0.766667, 0.15, 0.2,
0.025, 0.833333, 0.0625, 0.0833333,
0.025, 0.833333, 0.1, 0.133333,
0.025, 0.833333, 0.15, 0.2,
0.075, 0.833333, 0.0625, 0.0833333,
0.075, 0.833333, 0.1, 0.133333,
0.075, 0.833333, 0.15, 0.2,
0.125, 0.833333, 0.0625, 0.0833333,
0.125, 0.833333, 0.1, 0.133333,
0.125, 0.833333, 0.15, 0.2,
0.175, 0.833333, 0.0625, 0.0833333,
0.175, 0.833333, 0.1, 0.133333,
0.175, 0.833333, 0.15, 0.2,
0.225, 0.833333, 0.0625, 0.0833333,
0.225, 0.833333, 0.1, 0.133333,
0.225, 0.833333, 0.15, 0.2,
0.275, 0.833333, 0.0625, 0.0833333,
0.275, 0.833333, 0.1, 0.133333,
0.275, 0.833333, 0.15, 0.2,
0.325, 0.833333, 0.0625, 0.0833333,
0.325, 0.833333, 0.1, 0.133333,
0.325, 0.833333, 0.15, 0.2,
0.375, 0.833333, 0.0625, 0.0833333,
0.375, 0.833333, 0.1, 0.133333,
0.375, 0.833333, 0.15, 0.2,
0.425, 0.833333, 0.0625, 0.0833333,
0.425, 0.833333, 0.1, 0.133333,
0.425, 0.833333, 0.15, 0.2,
0.475, 0.833333, 0.0625, 0.0833333,
0.475, 0.833333, 0.1, 0.133333,
0.475, 0.833333, 0.15, 0.2,
0.525, 0.833333, 0.0625, 0.0833333,
0.525, 0.833333, 0.1, 0.133333,
0.525, 0.833333, 0.15, 0.2,
0.575, 0.833333, 0.0625, 0.0833333,
0.575, 0.833333, 0.1, 0.133333,
0.575, 0.833333, 0.15, 0.2,
0.625, 0.833333, 0.0625, 0.0833333,
0.625, 0.833333, 0.1, 0.133333,
0.625, 0.833333, 0.15, 0.2,
0.675, 0.833333, 0.0625, 0.0833333,
0.675, 0.833333, 0.1, 0.133333,
0.675, 0.833333, 0.15, 0.2,
0.725, 0.833333, 0.0625, 0.0833333,
0.725, 0.833333, 0.1, 0.133333,
0.725, 0.833333, 0.15, 0.2,
0.775, 0.833333, 0.0625, 0.0833333,
0.775, 0.833333, 0.1, 0.133333,
0.775, 0.833333, 0.15, 0.2,
0.825, 0.833333, 0.0625, 0.0833333,
0.825, 0.833333, 0.1, 0.133333,
0.825, 0.833333, 0.15, 0.2,
0.875, 0.833333, 0.0625, 0.0833333,
0.875, 0.833333, 0.1, 0.133333,
0.875, 0.833333, 0.15, 0.2,
0.925, 0.833333, 0.0625, 0.0833333,
0.925, 0.833333, 0.1, 0.133333,
0.925, 0.833333, 0.15, 0.2,
0.975, 0.833333, 0.0625, 0.0833333,
0.975, 0.833333, 0.1, 0.133333,
0.975, 0.833333, 0.15, 0.2,
0.025, 0.9, 0.0625, 0.0833333,
0.025, 0.9, 0.1, 0.133333,
0.025, 0.9, 0.15, 0.2,
0.075, 0.9, 0.0625, 0.0833333,
0.075, 0.9, 0.1, 0.133333,
0.075, 0.9, 0.15, 0.2,
0.125, 0.9, 0.0625, 0.0833333,
0.125, 0.9, 0.1, 0.133333,
0.125, 0.9, 0.15, 0.2,
0.175, 0.9, 0.0625, 0.0833333,
0.175, 0.9, 0.1, 0.133333,
0.175, 0.9, 0.15, 0.2,
0.225, 0.9, 0.0625, 0.0833333,
0.225, 0.9, 0.1, 0.133333,
0.225, 0.9, 0.15, 0.2,
0.275, 0.9, 0.0625, 0.0833333,
0.275, 0.9, 0.1, 0.133333,
0.275, 0.9, 0.15, 0.2,
0.325, 0.9, 0.0625, 0.0833333,
0.325, 0.9, 0.1, 0.133333,
0.325, 0.9, 0.15, 0.2,
0.375, 0.9, 0.0625, 0.0833333,
0.375, 0.9, 0.1, 0.133333,
0.375, 0.9, 0.15, 0.2,
0.425, 0.9, 0.0625, 0.0833333,
0.425, 0.9, 0.1, 0.133333,
0.425, 0.9, 0.15, 0.2,
0.475, 0.9, 0.0625, 0.0833333,
0.475, 0.9, 0.1, 0.133333,
0.475, 0.9, 0.15, 0.2,
0.525, 0.9, 0.0625, 0.0833333,
0.525, 0.9, 0.1, 0.133333,
0.525, 0.9, 0.15, 0.2,
0.575, 0.9, 0.0625, 0.0833333,
0.575, 0.9, 0.1, 0.133333,
0.575, 0.9, 0.15, 0.2,
0.625, 0.9, 0.0625, 0.0833333,
0.625, 0.9, 0.1, 0.133333,
0.625, 0.9, 0.15, 0.2,
0.675, 0.9, 0.0625, 0.0833333,
0.675, 0.9, 0.1, 0.133333,
0.675, 0.9, 0.15, 0.2,
0.725, 0.9, 0.0625, 0.0833333,
0.725, 0.9, 0.1, 0.133333,
0.725, 0.9, 0.15, 0.2,
0.775, 0.9, 0.0625, 0.0833333,
0.775, 0.9, 0.1, 0.133333,
0.775, 0.9, 0.15, 0.2,
0.825, 0.9, 0.0625, 0.0833333,
0.825, 0.9, 0.1, 0.133333,
0.825, 0.9, 0.15, 0.2,
0.875, 0.9, 0.0625, 0.0833333,
0.875, 0.9, 0.1, 0.133333,
0.875, 0.9, 0.15, 0.2,
0.925, 0.9, 0.0625, 0.0833333,
0.925, 0.9, 0.1, 0.133333,
0.925, 0.9, 0.15, 0.2,
0.975, 0.9, 0.0625, 0.0833333,
0.975, 0.9, 0.1, 0.133333,
0.975, 0.9, 0.15, 0.2,
0.025, 0.966667, 0.0625, 0.0833333,
0.025, 0.966667, 0.1, 0.133333,
0.025, 0.966667, 0.15, 0.2,
0.075, 0.966667, 0.0625, 0.0833333,
0.075, 0.966667, 0.1, 0.133333,
0.075, 0.966667, 0.15, 0.2,
0.125, 0.966667, 0.0625, 0.0833333,
0.125, 0.966667, 0.1, 0.133333,
0.125, 0.966667, 0.15, 0.2,
0.175, 0.966667, 0.0625, 0.0833333,
0.175, 0.966667, 0.1, 0.133333,
0.175, 0.966667, 0.15, 0.2,
0.225, 0.966667, 0.0625, 0.0833333,
0.225, 0.966667, 0.1, 0.133333,
0.225, 0.966667, 0.15, 0.2,
0.275, 0.966667, 0.0625, 0.0833333,
0.275, 0.966667, 0.1, 0.133333,
0.275, 0.966667, 0.15, 0.2,
0.325, 0.966667, 0.0625, 0.0833333,
0.325, 0.966667, 0.1, 0.133333,
0.325, 0.966667, 0.15, 0.2,
0.375, 0.966667, 0.0625, 0.0833333,
0.375, 0.966667, 0.1, 0.133333,
0.375, 0.966667, 0.15, 0.2,
0.425, 0.966667, 0.0625, 0.0833333,
0.425, 0.966667, 0.1, 0.133333,
0.425, 0.966667, 0.15, 0.2,
0.475, 0.966667, 0.0625, 0.0833333,
0.475, 0.966667, 0.1, 0.133333,
0.475, 0.966667, 0.15, 0.2,
0.525, 0.966667, 0.0625, 0.0833333,
0.525, 0.966667, 0.1, 0.133333,
0.525, 0.966667, 0.15, 0.2,
0.575, 0.966667, 0.0625, 0.0833333,
0.575, 0.966667, 0.1, 0.133333,
0.575, 0.966667, 0.15, 0.2,
0.625, 0.966667, 0.0625, 0.0833333,
0.625, 0.966667, 0.1, 0.133333,
0.625, 0.966667, 0.15, 0.2,
0.675, 0.966667, 0.0625, 0.0833333,
0.675, 0.966667, 0.1, 0.133333,
0.675, 0.966667, 0.15, 0.2,
0.725, 0.966667, 0.0625, 0.0833333,
0.725, 0.966667, 0.1, 0.133333,
0.725, 0.966667, 0.15, 0.2,
0.775, 0.966667, 0.0625, 0.0833333,
0.775, 0.966667, 0.1, 0.133333,
0.775, 0.966667, 0.15, 0.2,
0.825, 0.966667, 0.0625, 0.0833333,
0.825, 0.966667, 0.1, 0.133333,
0.825, 0.966667, 0.15, 0.2,
0.875, 0.966667, 0.0625, 0.0833333,
0.875, 0.966667, 0.1, 0.133333,
0.875, 0.966667, 0.15, 0.2,
0.925, 0.966667, 0.0625, 0.0833333,
0.925, 0.966667, 0.1, 0.133333,
0.925, 0.966667, 0.15, 0.2,
0.975, 0.966667, 0.0625, 0.0833333,
0.975, 0.966667, 0.1, 0.133333,
0.975, 0.966667, 0.15, 0.2,
0.05, 0.0666667, 0.2, 0.266667,
0.05, 0.0666667, 0.3, 0.4,
0.15, 0.0666667, 0.2, 0.266667,
0.15, 0.0666667, 0.3, 0.4,
0.25, 0.0666667, 0.2, 0.266667,
0.25, 0.0666667, 0.3, 0.4,
0.35, 0.0666667, 0.2, 0.266667,
0.35, 0.0666667, 0.3, 0.4,
0.45, 0.0666667, 0.2, 0.266667,
0.45, 0.0666667, 0.3, 0.4,
0.55, 0.0666667, 0.2, 0.266667,
0.55, 0.0666667, 0.3, 0.4,
0.65, 0.0666667, 0.2, 0.266667,
0.65, 0.0666667, 0.3, 0.4,
0.75, 0.0666667, 0.2, 0.266667,
0.75, 0.0666667, 0.3, 0.4,
0.85, 0.0666667, 0.2, 0.266667,
0.85, 0.0666667, 0.3, 0.4,
0.95, 0.0666667, 0.2, 0.266667,
0.95, 0.0666667, 0.3, 0.4,
0.05, 0.2, 0.2, 0.266667,
0.05, 0.2, 0.3, 0.4,
0.15, 0.2, 0.2, 0.266667,
0.15, 0.2, 0.3, 0.4,
0.25, 0.2, 0.2, 0.266667,
0.25, 0.2, 0.3, 0.4,
0.35, 0.2, 0.2, 0.266667,
0.35, 0.2, 0.3, 0.4,
0.45, 0.2, 0.2, 0.266667,
0.45, 0.2, 0.3, 0.4,
0.55, 0.2, 0.2, 0.266667,
0.55, 0.2, 0.3, 0.4,
0.65, 0.2, 0.2, 0.266667,
0.65, 0.2, 0.3, 0.4,
0.75, 0.2, 0.2, 0.266667,
0.75, 0.2, 0.3, 0.4,
0.85, 0.2, 0.2, 0.266667,
0.85, 0.2, 0.3, 0.4,
0.95, 0.2, 0.2, 0.266667,
0.95, 0.2, 0.3, 0.4,
0.05, 0.333333, 0.2, 0.266667,
0.05, 0.333333, 0.3, 0.4,
0.15, 0.333333, 0.2, 0.266667,
0.15, 0.333333, 0.3, 0.4,
0.25, 0.333333, 0.2, 0.266667,
0.25, 0.333333, 0.3, 0.4,
0.35, 0.333333, 0.2, 0.266667,
0.35, 0.333333, 0.3, 0.4,
0.45, 0.333333, 0.2, 0.266667,
0.45, 0.333333, 0.3, 0.4,
0.55, 0.333333, 0.2, 0.266667,
0.55, 0.333333, 0.3, 0.4,
0.65, 0.333333, 0.2, 0.266667,
0.65, 0.333333, 0.3, 0.4,
0.75, 0.333333, 0.2, 0.266667,
0.75, 0.333333, 0.3, 0.4,
0.85, 0.333333, 0.2, 0.266667,
0.85, 0.333333, 0.3, 0.4,
0.95, 0.333333, 0.2, 0.266667,
0.95, 0.333333, 0.3, 0.4,
0.05, 0.466667, 0.2, 0.266667,
0.05, 0.466667, 0.3, 0.4,
0.15, 0.466667, 0.2, 0.266667,
0.15, 0.466667, 0.3, 0.4,
0.25, 0.466667, 0.2, 0.266667,
0.25, 0.466667, 0.3, 0.4,
0.35, 0.466667, 0.2, 0.266667,
0.35, 0.466667, 0.3, 0.4,
0.45, 0.466667, 0.2, 0.266667,
0.45, 0.466667, 0.3, 0.4,
0.55, 0.466667, 0.2, 0.266667,
0.55, 0.466667, 0.3, 0.4,
0.65, 0.466667, 0.2, 0.266667,
0.65, 0.466667, 0.3, 0.4,
0.75, 0.466667, 0.2, 0.266667,
0.75, 0.466667, 0.3, 0.4,
0.85, 0.466667, 0.2, 0.266667,
0.85, 0.466667, 0.3, 0.4,
0.95, 0.466667, 0.2, 0.266667,
0.95, 0.466667, 0.3, 0.4,
0.05, 0.6, 0.2, 0.266667,
0.05, 0.6, 0.3, 0.4,
0.15, 0.6, 0.2, 0.266667,
0.15, 0.6, 0.3, 0.4,
0.25, 0.6, 0.2, 0.266667,
0.25, 0.6, 0.3, 0.4,
0.35, 0.6, 0.2, 0.266667,
0.35, 0.6, 0.3, 0.4,
0.45, 0.6, 0.2, 0.266667,
0.45, 0.6, 0.3, 0.4,
0.55, 0.6, 0.2, 0.266667,
0.55, 0.6, 0.3, 0.4,
0.65, 0.6, 0.2, 0.266667,
0.65, 0.6, 0.3, 0.4,
0.75, 0.6, 0.2, 0.266667,
0.75, 0.6, 0.3, 0.4,
0.85, 0.6, 0.2, 0.266667,
0.85, 0.6, 0.3, 0.4,
0.95, 0.6, 0.2, 0.266667,
0.95, 0.6, 0.3, 0.4,
0.05, 0.733333, 0.2, 0.266667,
0.05, 0.733333, 0.3, 0.4,
0.15, 0.733333, 0.2, 0.266667,
0.15, 0.733333, 0.3, 0.4,
0.25, 0.733333, 0.2, 0.266667,
0.25, 0.733333, 0.3, 0.4,
0.35, 0.733333, 0.2, 0.266667,
0.35, 0.733333, 0.3, 0.4,
0.45, 0.733333, 0.2, 0.266667,
0.45, 0.733333, 0.3, 0.4,
0.55, 0.733333, 0.2, 0.266667,
0.55, 0.733333, 0.3, 0.4,
0.65, 0.733333, 0.2, 0.266667,
0.65, 0.733333, 0.3, 0.4,
0.75, 0.733333, 0.2, 0.266667,
0.75, 0.733333, 0.3, 0.4,
0.85, 0.733333, 0.2, 0.266667,
0.85, 0.733333, 0.3, 0.4,
0.95, 0.733333, 0.2, 0.266667,
0.95, 0.733333, 0.3, 0.4,
0.05, 0.866667, 0.2, 0.266667,
0.05, 0.866667, 0.3, 0.4,
0.15, 0.866667, 0.2, 0.266667,
0.15, 0.866667, 0.3, 0.4,
0.25, 0.866667, 0.2, 0.266667,
0.25, 0.866667, 0.3, 0.4,
0.35, 0.866667, 0.2, 0.266667,
0.35, 0.866667, 0.3, 0.4,
0.45, 0.866667, 0.2, 0.266667,
0.45, 0.866667, 0.3, 0.4,
0.55, 0.866667, 0.2, 0.266667,
0.55, 0.866667, 0.3, 0.4,
0.65, 0.866667, 0.2, 0.266667,
0.65, 0.866667, 0.3, 0.4,
0.75, 0.866667, 0.2, 0.266667,
0.75, 0.866667, 0.3, 0.4,
0.85, 0.866667, 0.2, 0.266667,
0.85, 0.866667, 0.3, 0.4,
0.95, 0.866667, 0.2, 0.266667,
0.95, 0.866667, 0.3, 0.4,
0.05, 1, 0.2, 0.266667,
0.05, 1, 0.3, 0.4,
0.15, 1, 0.2, 0.266667,
0.15, 1, 0.3, 0.4,
0.25, 1, 0.2, 0.266667,
0.25, 1, 0.3, 0.4,
0.35, 1, 0.2, 0.266667,
0.35, 1, 0.3, 0.4,
0.45, 1, 0.2, 0.266667,
0.45, 1, 0.3, 0.4,
0.55, 1, 0.2, 0.266667,
0.55, 1, 0.3, 0.4,
0.65, 1, 0.2, 0.266667,
0.65, 1, 0.3, 0.4,
0.75, 1, 0.2, 0.266667,
0.75, 1, 0.3, 0.4,
0.85, 1, 0.2, 0.266667,
0.85, 1, 0.3, 0.4,
0.95, 1, 0.2, 0.266667,
0.95, 1, 0.3, 0.4,
0.1, 0.133333, 0.4, 0.533333,
0.1, 0.133333, 0.6, 0.8,
0.3, 0.133333, 0.4, 0.533333,
0.3, 0.133333, 0.6, 0.8,
0.5, 0.133333, 0.4, 0.533333,
0.5, 0.133333, 0.6, 0.8,
0.7, 0.133333, 0.4, 0.533333,
0.7, 0.133333, 0.6, 0.8,
0.9, 0.133333, 0.4, 0.533333,
0.9, 0.133333, 0.6, 0.8,
0.1, 0.4, 0.4, 0.533333,
0.1, 0.4, 0.6, 0.8,
0.3, 0.4, 0.4, 0.533333,
0.3, 0.4, 0.6, 0.8,
0.5, 0.4, 0.4, 0.533333,
0.5, 0.4, 0.6, 0.8,
0.7, 0.4, 0.4, 0.533333,
0.7, 0.4, 0.6, 0.8,
0.9, 0.4, 0.4, 0.533333,
0.9, 0.4, 0.6, 0.8,
0.1, 0.666667, 0.4, 0.533333,
0.1, 0.666667, 0.6, 0.8,
0.3, 0.666667, 0.4, 0.533333,
0.3, 0.666667, 0.6, 0.8,
0.5, 0.666667, 0.4, 0.533333,
0.5, 0.666667, 0.6, 0.8,
0.7, 0.666667, 0.4, 0.533333,
0.7, 0.666667, 0.6, 0.8,
0.9, 0.666667, 0.4, 0.533333,
0.9, 0.666667, 0.6, 0.8,
0.1, 0.933333, 0.4, 0.533333,
0.1, 0.933333, 0.6, 0.8,
0.3, 0.933333, 0.4, 0.533333,
0.3, 0.933333, 0.6, 0.8,
0.5, 0.933333, 0.4, 0.533333,
0.5, 0.933333, 0.6, 0.8,
0.7, 0.933333, 0.4, 0.533333,
0.7, 0.933333, 0.6, 0.8,
0.9, 0.933333, 0.4, 0.533333,
0.9, 0.933333, 0.6, 0.8,
0.2, 0.266667, 0.8, 1,
0.2, 0.266667, 1, 1,
0.2, 0.266667, 1, 1,
0.6, 0.266667, 0.8, 1,
0.6, 0.266667, 1, 1,
0.6, 0.266667, 1, 1,
1, 0.266667, 0.8, 1,
1, 0.266667, 1, 1,
1, 0.266667, 1, 1,
0.2, 0.8, 0.8, 1,
0.2, 0.8, 1, 1,
0.2, 0.8, 1, 1,
0.6, 0.8, 0.8, 1,
0.6, 0.8, 1, 1,
0.6, 0.8, 1, 1,
1, 0.8, 0.8, 1,
1, 0.8, 1, 1,
1, 0.8, 1, 1,
};

} /*namespace ssd */

namespace object_detection {

DetectorPostprocessing::DetectorPostprocessing(
    const float threshold,
    const float nms,
    int numClasses,
    int topN)
    :   m_threshold(threshold),
        m_nms(nms),
        m_numClasses(numClasses),
        m_topN(topN)
{}

void DetectorPostprocessing::RunPostProcessing(
    uint8_t* imgIn,
    uint32_t imgRows,
    uint32_t imgCols,
    TfLiteTensor* modelOutput0,
    TfLiteTensor* modelOutput1,
    std::vector<DetectionResult>& resultsOut)
{
    /* init postprocessing */
    Network net {
        .inputWidth = static_cast<int>(imgCols),
        .inputHeight = static_cast<int>(imgRows),
        .numClasses = m_numClasses,
        .branches = {
            Branch {
                .resolution = static_cast<int>(imgCols/32),
                .numBox = 3,
                .anchor = anchor1,
                .modelOutput = modelOutput0->data.int8,
                .scale = ((TfLiteAffineQuantization*)(modelOutput0->quantization.params))->scale->data[0],
                .zeroPoint = ((TfLiteAffineQuantization*)(modelOutput0->quantization.params))->zero_point->data[0],
                .size = modelOutput0->bytes
            },
            Branch {
                .resolution = static_cast<int>(imgCols/16),
                .numBox = 3,
                .anchor = anchor2,
                .modelOutput = modelOutput1->data.int8,
                .scale = ((TfLiteAffineQuantization*)(modelOutput1->quantization.params))->scale->data[0],
                .zeroPoint = ((TfLiteAffineQuantization*)(modelOutput1->quantization.params))->zero_point->data[0],
                .size = modelOutput1->bytes
            }
        },
        .topN = m_topN
    };
    /* End init */

    /* Start postprocessing */
    int originalImageWidth = originalImageSize;
    int originalImageHeight = originalImageSize;

    std::forward_list<image::Detection> detections;
    GetNetworkBoxes(net, originalImageWidth, originalImageHeight, m_threshold, detections);

    /* Do nms */
    CalculateNMS(detections, net.numClasses, m_nms);

    for (auto& it: detections) {
        float xMin = it.bbox.x - it.bbox.w / 2.0f;
        float xMax = it.bbox.x + it.bbox.w / 2.0f;
        float yMin = it.bbox.y - it.bbox.h / 2.0f;
        float yMax = it.bbox.y + it.bbox.h / 2.0f;

        if (xMin < 0) {
            xMin = 0;
        }
        if (yMin < 0) {
            yMin = 0;
        }
        if (xMax > originalImageWidth) {
            xMax = originalImageWidth;
        }
        if (yMax > originalImageHeight) {
            yMax = originalImageHeight;
        }

        float boxX = xMin;
        float boxY = yMin;
        float boxWidth = xMax - xMin;
        float boxHeight = yMax - yMin;

        for (int j = 0; j < net.numClasses; ++j) {
            if (it.prob[j] > 0) {

                DetectionResult tmpResult = {};
                tmpResult.m_normalisedVal = it.prob[j];
                tmpResult.m_x0 = boxX;
                tmpResult.m_y0 = boxY;
                tmpResult.m_w = boxWidth;
                tmpResult.m_h = boxHeight;

                resultsOut.push_back(tmpResult);

                /* TODO: Instead of draw on the image, return the boxes and draw on the LCD */
                DrawBoxOnImage(imgIn, originalImageWidth, originalImageHeight, boxX, boxY, boxWidth, boxHeight);;
            }
        }
    }
}


void DetectorPostprocessing::InsertTopNDetections(std::forward_list<image::Detection>& detections, image::Detection& det)
{
    std::forward_list<image::Detection>::iterator it;
    std::forward_list<image::Detection>::iterator last_it;
    for ( it = detections.begin(); it != detections.end(); ++it ) {
        if(it->objectness > det.objectness)
            break;
        last_it = it;
    }
    if(it != detections.begin()) {
        detections.emplace_after(last_it, det);
        detections.pop_front();
    }
}

void DetectorPostprocessing::GetNetworkBoxes(Network& net, int imageWidth, int imageHeight, float threshold, std::forward_list<image::Detection>& detections)
{
    int numClasses = net.numClasses;
    int num = 0;
    auto det_objectness_comparator = [](image::Detection& pa, image::Detection& pb) {
        return pa.objectness < pb.objectness;
    };
    for (size_t i = 0; i < net.branches.size(); ++i) {
        int height   = net.branches[i].resolution;
        int width    = net.branches[i].resolution;
        int channel  = net.branches[i].numBox*(5+numClasses);

        for (int h = 0; h < net.branches[i].resolution; h++) {
            for (int w = 0; w < net.branches[i].resolution; w++) {
                for (int anc = 0; anc < net.branches[i].numBox; anc++) {

                    /* Objectness score */
                    int bbox_obj_offset = h * width * channel + w * channel + anc * (numClasses + 5) + 4;
                    float objectness = math::MathUtils::SigmoidF32(((float)net.branches[i].modelOutput[bbox_obj_offset] - net.branches[i].zeroPoint) * net.branches[i].scale);

                    if(objectness > threshold) {
                        image::Detection det;
                        det.objectness = objectness;
                        /* Get bbox prediction data for each anchor, each feature point */
                        int bbox_x_offset = bbox_obj_offset -4;
                        int bbox_y_offset = bbox_x_offset + 1;
                        int bbox_w_offset = bbox_x_offset + 2;
                        int bbox_h_offset = bbox_x_offset + 3;
                        int bbox_scores_offset = bbox_x_offset + 5;

                        det.bbox.x = ((float)net.branches[i].modelOutput[bbox_x_offset] - net.branches[i].zeroPoint) * net.branches[i].scale;
                        det.bbox.y = ((float)net.branches[i].modelOutput[bbox_y_offset] - net.branches[i].zeroPoint) * net.branches[i].scale;
                        det.bbox.w = ((float)net.branches[i].modelOutput[bbox_w_offset] - net.branches[i].zeroPoint) * net.branches[i].scale;
                        det.bbox.h = ((float)net.branches[i].modelOutput[bbox_h_offset] - net.branches[i].zeroPoint) * net.branches[i].scale;


                        float bbox_x, bbox_y;

                        /* Eliminate grid sensitivity trick involved in YOLOv4 */
                        bbox_x = math::MathUtils::SigmoidF32(det.bbox.x);
                        bbox_y = math::MathUtils::SigmoidF32(det.bbox.y);
                        det.bbox.x = (bbox_x + w) / width;
                        det.bbox.y = (bbox_y + h) / height;

                        det.bbox.w = exp(det.bbox.w) * net.branches[i].anchor[anc*2] / net.inputWidth;
                        det.bbox.h = exp(det.bbox.h) * net.branches[i].anchor[anc*2+1] / net.inputHeight;

                        for (int s = 0; s < numClasses; s++) {
                            float sig = math::MathUtils::SigmoidF32(((float)net.branches[i].modelOutput[bbox_scores_offset + s] - net.branches[i].zeroPoint) * net.branches[i].scale)*objectness;
                            det.prob.emplace_back((sig > threshold) ? sig : 0);
                        }

                        /* Correct_YOLO_boxes */
                        det.bbox.x *= imageWidth;
                        det.bbox.w *= imageWidth;
                        det.bbox.y *= imageHeight;
                        det.bbox.h *= imageHeight;

                        if (num < net.topN || net.topN <=0) {
                            detections.emplace_front(det);
                            num += 1;
                        } else if (num == net.topN) {
                            detections.sort(det_objectness_comparator);
                            InsertTopNDetections(detections,det);
                            num += 1;
                        } else {
                            InsertTopNDetections(detections,det);
                        }
                    }
                }
            }
        }
    }
    if(num > net.topN)
        num -=1;
}

void DetectorPostprocessing::DrawBoxOnImage(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight)
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset) {
        if ( (offset) >= im_width*im_height*channelsImageDisplayed) {
            offset = im_width * im_height * channelsImageDisplayed -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < 2; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset);
            imgIn[offset] = 0xFF;
            /*bottom*/
            offset = (i + (boxY + boxHeight - line)*imWidth + boxX) * channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight,offset);
            imgIn[offset] = 0xFF;
        }
    }

    for (int i=0; i < boxHeight; i++) {
        /* Draw two vertical lines */
        for (int line=0; line < 2; line++) {
            /*left*/
            offset = ((i + boxY)*imWidth + boxX + line)*channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight,offset);
            imgIn[offset] = 0xFF;
            /*right*/
            offset = ((i + boxY)*imWidth + boxX + boxWidth - line)*channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight, offset);
            imgIn[offset] = 0xFF;
        }
    }

} //DrawBoxOnImage

} /* namespace object_detection */

//--------------------------ULTRA FACE

namespace ssd {


int m_num_anchors = SSD_NUM_PRIORS; 
int m_topk = SSD_NUM_MAX_TARGETS;
float m_conf_threshold = 0.7f;
float m_iou_threshold = 0.5f;

const float center_variance = 0.1;
const float size_variance = 0.2;
int m_image_h = 120;
int m_image_w = 160;

#define clip(x, y) (x < 0 ? 0 : (x > y ? y : x))

short generateBBox(TfLiteTensor* model_output[], FaceInfo out_boxes[]) {

    int8_t* bbox_value = model_output[0]->data.int8;
    int8_t* score_value = model_output[1]->data.int8;

#if WITH_YAW_AND_LANDMARKS
    int8_t* landmarks_value = model_output[0]->data.int8;
    bbox_value                = model_output[1]->data.int8;
    int8_t* yaw_value        = model_output[2]->data.int8;
    score_value                = model_output[3]->data.int8;
#elif WITH_YAW
    int8_t* yaw_value = model_output[2]->data.int8;
#endif
    
    float score;
    short out_boxes_i = 0;
    float x_center, y_center, w, h;
    float yaw;
    float landmarks_x, landmarks_y;

#if WITH_YAW_AND_LANDMARKS
    for (int i = 0; i < m_num_anchors; i++) {
        score = ((float)score_value[2 * i + 1] - model_output[3]->params.zero_point) * model_output[3]->params.scale;
        yaw = ((float)yaw_value[i] - model_output[2]->params.zero_point) * model_output[2]->params.scale;
        
        //info("i= %d, score = %f, yaw = %f ,score_scale = %f \n",i,score,yaw,model_output[3]->params.scale);

        if (score > m_conf_threshold) {
            FaceInfo rect = {};
            x_center = ((float)bbox_value[i * 4] - model_output[1]->params.zero_point) * model_output[1]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
            y_center = ((float)bbox_value[i * 4 + 1] - model_output[1]->params.zero_point) * model_output[1]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
            w = exp(((float)bbox_value[i * 4 + 2] - model_output[1]->params.zero_point) * model_output[1]->params.scale * size_variance) * ssd::priors_arr[i][2];
            h = exp(((float)bbox_value[i * 4 + 3] - model_output[1]->params.zero_point) * model_output[1]->params.scale * size_variance) * ssd::priors_arr[i][3];

            rect.x1 = (short)(clip(x_center - w / 2.0, 1) * m_image_w);
            rect.y1 = (short)(clip(y_center - h / 2.0, 1) * m_image_h);
            rect.x2 = (short)(clip(x_center + w / 2.0, 1) * m_image_w);
            rect.y2 = (short)(clip(y_center + h / 2.0, 1) * m_image_h);

            rect.score = clip(score, 1);
            rect.yaw = int(round(yaw * 90));

            for (size_t l_i = 0; l_i < 5; l_i++) {
                landmarks_x = ((float)landmarks_value[i * 10 + 2 * l_i] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
                landmarks_y = ((float)landmarks_value[i * 10 + 2 * l_i + 1] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
                rect.landmarks[2 * l_i] = round(clip(landmarks_x, 1.0) * m_image_w);
                rect.landmarks[2 * l_i + 1] = round(clip(landmarks_y, 1.0) * m_image_h);
            }

            out_boxes[out_boxes_i++] = rect;

            if (out_boxes_i == SSD_NUM_MAX_TARGETS)
                break;
        }
    }

    return out_boxes_i;
#else
    for (int i = 0; i < m_num_anchors; i++) {
        score = ((float)score_value[2 * i + 1] - model_output[1]->params.zero_point) * model_output[1]->params.scale;
#if WITH_YAW
        yaw = ((float)yaw_value[i] - model_output[2]->params.zero_point) * model_output[2]->params.scale;
#endif
        if (score > m_conf_threshold) {
            FaceInfo rect = { 0 };
            x_center = ((float)bbox_value[i * 4] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][2] + ssd::priors_arr[i][0];
            y_center = ((float)bbox_value[i * 4 + 1] - model_output[0]->params.zero_point) * model_output[0]->params.scale * center_variance * ssd::priors_arr[i][3] + ssd::priors_arr[i][1];
            w = exp(((float)bbox_value[i * 4 + 2] - model_output[0]->params.zero_point) * model_output[0]->params.scale * size_variance) * ssd::priors_arr[i][2];
            h = exp(((float)bbox_value[i * 4 + 3] - model_output[0]->params.zero_point) * model_output[0]->params.scale * size_variance) * ssd::priors_arr[i][3];

            rect.x1 = (short)(clip(x_center - w / 2.0, 1) * m_image_w);
            rect.y1 = (short)(clip(y_center - h / 2.0, 1) * m_image_h);
            rect.x2 = (short)(clip(x_center + w / 2.0, 1) * m_image_w);
            rect.y2 = (short)(clip(y_center + h / 2.0, 1) * m_image_h);
                        
            rect.score = clip(score, 1);            
#if WITH_YAW
            rect.yaw = int(round(yaw * 90));
#endif
            out_boxes[out_boxes_i++] = rect;

            if (out_boxes_i == SSD_NUM_MAX_TARGETS)
                break;
        }
    }

    return out_boxes_i;
#endif // WITH_YAW_AND_LANDMARKS
} //generateBBox



short nms(FaceInfo *input_boxes, short num_input_boxes, FaceInfo output_boxes[]) {
    //possible bug with sizeof here!!
    std::sort(input_boxes, input_boxes + num_input_boxes, [](const FaceInfo &a, const FaceInfo &b) { return a.score > b.score; });

    int box_num = num_input_boxes;

    std::vector<int> merged(box_num, 0);
    
    short num_detections = 0;

    for (int i = 0; i < box_num; i++) {
        if (merged[i])
            continue;
        
        std::vector<FaceInfo> buf(box_num, FaceInfo());
        short buf_i = 0;
        buf[buf_i++] = input_boxes[i];
        merged[i] = 1;

        short h0 = input_boxes[i].y2 - input_boxes[i].y1 + 1;
        short w0 = input_boxes[i].x2 - input_boxes[i].x1 + 1;

        int area0 = h0 * w0;

        for (int j = i + 1; j < box_num; j++) {
            if (merged[j])
                continue;

            short inner_x0 = input_boxes[i].x1 > input_boxes[j].x1 ? input_boxes[i].x1 : input_boxes[j].x1;
            short inner_y0 = input_boxes[i].y1 > input_boxes[j].y1 ? input_boxes[i].y1 : input_boxes[j].y1;

            short inner_x1 = input_boxes[i].x2 < input_boxes[j].x2 ? input_boxes[i].x2 : input_boxes[j].x2;
            short inner_y1 = input_boxes[i].y2 < input_boxes[j].y2 ? input_boxes[i].y2 : input_boxes[j].y2;

            short inner_h = inner_y1 - inner_y0 + 1;
            short inner_w = inner_x1 - inner_x0 + 1;

            if (inner_h <= 0 || inner_w <= 0)
                continue;

            int inner_area = inner_h * inner_w;

            short h1 = input_boxes[j].y2 - input_boxes[j].y1 + 1;
            short w1 = input_boxes[j].x2 - input_boxes[j].x1 + 1;

            int area1 = h1 * w1;

            float iou = inner_area / (float)(area0 + area1 - inner_area);

            if (iou > m_iou_threshold) {
                merged[j] = 1;
                buf[buf_i++] = input_boxes[j];
            }
        }
        output_boxes[num_detections++] = buf[0];

        if (num_detections == m_topk)
            break;
    }

    return num_detections;
} //nms


void DrawBoxSSD(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,int channelsImageDisplayed)
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < 2; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset] = 0xFF;
            /*bottom*/
            offset = (i + (boxY + boxHeight - line)*imWidth + boxX) * channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset] = 0xFF;
        }
    }

    for (int i=0; i < boxHeight; i++) {
        /* Draw two vertical lines */
        for (int line=0; line < 2; line++) {
            /*left*/
            offset = ((i + boxY)*imWidth + boxX + line)*channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset] = 0xFF;
            /*right*/
            offset = ((i + boxY)*imWidth + boxX + boxWidth - line)*channelsImageDisplayed;
            CheckAndFixOffset(imWidth,imHeight, offset,channelsImageDisplayed);
            imgIn[offset] = 0xFF;
        }
    }

} //DrawBoxSSD


void DrawFullBoxSSD(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,int channelsImageDisplayed)
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };
    
    
    if (boxWidth < 0) {
        boxWidth = -boxWidth;
        boxX = boxX - boxWidth;
    }
    
    if (boxHeight < 0) {
        boxHeight = -boxHeight;
        boxY = boxY - boxHeight;
    }

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < boxHeight; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset+1] = (0xFF); //Buggy
        }
    }

} //DrawFullBoxSSD


void DrawFullBoxSSDColor(uint8_t* imgIn, int imWidth, int imHeight, int boxX,int boxY, int boxWidth, int boxHeight,EmzaColor color )
{
    auto CheckAndFixOffset = [](int im_width,int im_height,int& offset,int color_channels) {
        if ( (offset) >= im_width*im_height*color_channels) {
            offset = im_width * im_height * color_channels -1;
        }
        else if ( (offset) < 0) {
            offset = 0;
        }
    };
    
    
    if (boxWidth < 0) {
        boxWidth = -boxWidth;
        boxX = boxX - boxWidth;
    }
    
    if (boxHeight < 0) {
        boxHeight = -boxHeight;
        boxY = boxY - boxHeight;
    }

    /* Consistency checks */
    if (!imgIn) {
        return;
    }

    int offset=0;
    int channelsImageDisplayed = 3;
    for (int i=0; i < boxWidth; i++) {
        /* Draw two horizontal lines */
        for (int line=0; line < boxHeight; line++) {
            /*top*/
            offset =(i + (boxY + line)*imWidth + boxX) * channelsImageDisplayed + 2; /* channelsImageDisplayed for rgb or grayscale*/
            CheckAndFixOffset(imWidth,imHeight,offset,channelsImageDisplayed);
            imgIn[offset+0] = color.r;
            imgIn[offset+1] = color.g;
            imgIn[offset+2] = color.b;
        }
    }

} //DrawFullBoxSSDColor


EmzaColor landmarks_colors[5] = {
    {255, 0,   0},
    {0,   0,   255},
    {0,   255, 0},
    {255, 255, 0},
    {255, 0,   255}
    };

void drawLandmarksAndYaw(uint8_t* srcPtr,int srcHeight, int srcWidth,
                                    FaceInfo *face_list, int n_faces,int n_channels)
{
    for (int i = 0; i < n_faces; i++)
        {
            FaceInfo const& face = face_list[i];
            short x1 = face.x1;
            short y1 = face.y1;
            short x2 = face.x2;
            short y2 = face.y2;

            short w = x2 - x1 + 1;
            short h = y2 - y1 + 1;
            //bounding box
            DrawBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1, w, h,n_channels);
            //yaw
            //DrawFullBoxSSD(srcPtr, srcWidth, srcHeight, x1 + w/2, y1, w*face.yaw/100.0, 3,n_channels);
            //confidence
            //DrawFullBoxSSD(srcPtr, srcWidth, srcHeight, x1, y1 + h, 3, -h*face.score,n_channels);
            
            //landmarks
            for (int j = 0; j < 5; j++) {
            //    short landmarks[10]; // (x,y ... ,x,y)
            short lx = face.landmarks[2*j];
            short ly = face.landmarks[2*j+1];
            
            EmzaColor curr_color = landmarks_colors[j];//{0xFF,0xFF,0xFF};
            DrawFullBoxSSDColor(srcPtr, srcWidth, srcHeight, lx-1, ly-2, 3,3,curr_color);            
            } //for j
        } //for i
} //drawLandmarksAndYaw

} /* namespace ssd */


} /* namespace app */
} /* namespace arm */
